# help file input for kspsig, regenerate the man page with:
# help2man --output kspsig.1 --include=kspsig.h2m kspsig
--locale=C
--no-info
[NAME]
.B kspsig \fR- Key Signing Party signature verification tool

/verification tool/
If you are concerned about the hash algorithm strength used
in key signing this tool seeks to answer questions you may have 
following a key signing party...
.br
- How strongly did others sign my key?
.br
- How strongly did I sign other's keys?
.br
- How strong are the signatures for my key?

This tool only reads keyrings: it does not do any key modifications.

[FILES]
$HOME/.gnupg - GnuPG working dir (change with --gnupghome)
.br
$HOME/.caff/gnupghome - caff's working dir for gpg (change with --caffhome)

[EXAMPLES]
How strongly did others sign my key? I received e-mails from people
that signed my key at a key signing party that included an attachment
like:

0x1111222233334444.1.signed-by-0x5555666677778888.asc

I have saved all of these *.asc files in a directory and have changed
to that directory and run:

$ kspsig *.asc

Sometimes a signature file contains multiple signatures.  The
default incoming action will show you which key is signed on the first 
line (usually this is your ID).  Subsequent lines
show the strengh of each signature for that key. Multiple signatures
could be the result of someone signing your key that has multiple
keys (e.g. older one and a newer one):

$ kspsig 0x40BFEE868B055D9B.1.signed-by-0x542AA88AAD5896AD.asc
        pub:u:4096:1:40BFEE868B055D9B:2010-07-26:::u:Carla Coder <carla@coder.net>:
        SHA256    AD5896AD  Joe Hacker <joe@hacker.net>
        SHA256    7D806443  Joe Hacker <joe@hacker.net>
.br
$ 

Note that typically caff(1) prunes extra signatures. 

How strongly did I sign other's keys? I just learned about
.B kspsig\fR and I want to see what strength I used to sign
other people's keys.  I know that my 
.B caff\fR keyring has these signatures, but the users may
not have imported and uploaded my signatures. I know the hex
ID of one of the keys I signed:

$ kspsig --outgoing DEADCAFF

Maybe I want to see the strengh of all the keys I've signed, but
don't want to dig out the hex ID's by hand.  In a
.B bash\fR shell I can do:

$ for id in `find ~/.caff/keys -name '*.key.*' | cut -d/ -f7 | cut -c9-16 | sort -u`; do kspsig -o $id; done

How strong are the signatures for my key?

$ kspsig --signatures

How strong are the signatures for Bob's key?

$ kspsig --key=bob --signatures

I wonder how Alice signed Bob's key?  I can find out with by
using my real keyring as the signing keyring (note that with --verbose
the hex id's guessed for the names are shown):

$ kspsig -v -g ~/.gnupg -k alice@restaurant.info -o bob

[NOTES]
While ID or YOURID are typically expressed as hex strings, they may
be given as a name, or e-mail address as in 
.B gpg\fR.  If there are
multiple matches 
.B kspsig\fR arbitrarily chooses the last one (presuming
it's the latest).  If this guess is incorrect you may provide a
specific hex ID instead.

It is unfortunate that using 
.B caff\fR out of the box will not use the signature strength
preferences you may have indicated for 
.B gpg\fR (see first URL below).
If you have set "cert-digest-algo SHA512" in $HOME/.gnupg/gpg.conf then
one way to configure 
.B caff\fR is:

$ mv $HOME/.caff/gnupghome/gpg.conf $HOME/.caff/gnupghome/gpg.conf.old

$ ln -s $HOME/.gnupg/gpg.conf $HOME/.caff/gnupghome/gpg.conf

Please note this program is under development and would benefit
from peer review.  While it attempts to use and annotate the output of
.B gpg\fR there are likely more direct and clean ways to get the
signature algorithm string by directly reading the keyrings.

There are currently only two levels of debugging.  Level 1
shows the gpg packets with the hash algorithm (as the
signature strengths are stored in an internal data structure) and
the query to get the hash algorithm while annotating
the output of gpg --list-sigs.  Level 2 also prints out the internal
data structure in between these steps.

We need to develop guidelines and etiquette for how
to handle receiving weak signatures (do you add them anyway
or politely ask for the signer to reconfigure and try again?) 
and how to remedy having sent weak signatures (see last URL).

[SEE ALSO]
gpg(1), caff(1)
.br
http://www.debian-administration.org/users/dkg/weblog/48
.br
http://www.gnupg.org/faq/weak-digest-algos.html
.br
http://keyring.debian.org/creating-key.html
.br
http://lists.debian.org/debian-devel-announce/2009/05/msg00005.html
.br
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=527944
.br
http://www.gag.com/bdale/blog/posts/Strong_Keys.html
