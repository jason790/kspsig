kspsig
------

Key Signing Party signature verification tool

If  you  are  concerned  about  the  hash algorithm strength used 
in key signing this tool seeks to answer questions you may have 
following a key signing party...
- How strongly did others sign my key?
- How strongly did I sign other's keys?
- How strong are the signatures for my key?

This tool only reads keyrings: it does not do any key modifications.

See the man page for additional documentation and examples


News
----

An ITP has been filed for this program #594907
  http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=594907

However it has been suggested that it be combined with signing-party
and thus the following bug has been opened #595060
  http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=595060

In the meantime you may add this package to a Debian unstable
system by adding the info9 repository as a source.  The easiest
way to do this is simply:
# cp /usr/share/doc/kspsig/info9.net.list /etc/apt/sources.list.d/

Or you can add these lines to /etc/apt/sources.list
  deb http://info9.net/debian/ unstable/
  deb-src http://info9.net/debian/ unstable/


Requirements
------------

Depends on python 2.6 and python-gnupginterface (and thus gpg).
Although not strictly required it is assumed that caff is also installed.

The man page can be regenerated using help2man with:
$ help2man --output kspsig.1 --include=kspsig.h2m kspsig


License
-------

Copyright (c) 2010 Tom Marble

Licensed under GPLv3 or later http://www.gnu.org/licenses/gpl-3.0.txt
The full text of the license is available in LICENSE and
on Debian (and derived) systems you may find the full text of the
license in /usr/share/common-licenses/GPL-3


Download
--------

You can find the latest version of kspsig at:
http://github.com/tmarble/kspsig


Configuring caff
----------------

Configuring caff to use a strong hash algorithm for signatures
is a little tricky... If you haven't already please consider
adding "cert-digest-algo  SHA512" to ~/.gnupg/gpg.conf and then
insure caff uses your default GnuPG config file as follows:
$ mv ~/.caff/gnupghome/gpg.conf ~/.caff/gnupghome/gpg.conf.old
$ ln -s ~/.gnupg/gpg.conf ~/.caff/gnupghome/gpg.conf

You can verify the caff signature preference with:
$ grep cert-digest-algo ~/.gnupg/gpg.conf ~/.caff/gnupghome/gpg.conf
/home/USER/.gnupg/gpg.conf:cert-digest-algo SHA512
/home/USER/.caff/gnupghome/gpg.conf:cert-digest-algo SHA512
$ 


Fixing weak signatures
----------------------

Once you have caff configured for a strong signature algorithm
you may be asked to re-sign some keys.  Here is an approach:

1. Delete the weak signature(s) on your signature (caff) keyring
   (e.g. you signed DEADCAFF with SHA1):

  $ gpg --homedir=~/.caff/gnupghome --secret-keyring ~/.gnupg/secring.gpg --no-auto-check-trustdb --trust-model=always --edit-key DEADCAFF
  gpg> uid 1
  gpg> delsig
  gpg> save

  NOTE: if you signed multiple uid's for that key will need to
  select and delete the signature for each.

2. Re-sign with caff

   $ caff --no-download DEADCAFF

3. Verify the new signature

   $ kspsig --outgoing=DEADCAFF

4. If the new signature doesn't use the algorithm you intended
   then try to reconfigure caff and goto step 1.


See Also
--------

gpg(1)
caff(1)
http://www.debian-administration.org/users/dkg/weblog/48
http://keyring.debian.org/creating-key.html
http://lists.debian.org/debian-devel-announce/2009/05/msg00005.html
http://www.gag.com/bdale/blog/posts/Strong_Keys.html
http://www.gnupg.org/faq/weak-digest-algos.html

To Do
-----

- Peer review of the approach of using gpg --export and 
  gpg --list-packets
- Consider rewriting with direct access to the keyrings


